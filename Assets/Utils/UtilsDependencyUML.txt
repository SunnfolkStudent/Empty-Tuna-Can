@startuml

package Utils {
 package Achievements {
  class Achievement <ScriptableObject> {
   - string achievementName
   - string achievementDescription
   - bool isGotten
   ~ Requirement[] requirements
  }
  
  class Requirement {
   - TrackableStat stat
   - int amountRequired
   - bool isComplete
  }
  
  abstract class AchievementFunctions <MonoBehaviour> {
   ~ Achievement[] AllAchievements
   ~ TrackableStat[] AllTrackableStats
   # void Awake
   # void InitializeAchievements
   # abstract void UnlockAchievement
   # void ResetAchievementProgress
   # void IncreaseTrackableStat
   # bool HasAllRequirements
  }
  
  class TrackableStat <ScriptableObject> {
   - int amount
  }
 }

 package RuntimeSet {
  class GameObjectRuntimeSetScrub <GenericRuntimeSetScrub> {
  }
  
  abstract class GenericRuntimeSetScrub <ScriptableObject> {
      # List<T> items = new List<T>()
      # public void Add(T item)
      # void Remove(T item)
  }
 }
 
 struct ClampedFloat {
     - float minValue
     - float maxValue
     - float value
     - float Value
     + UnityAction<float> OnIncreaseValue
     + UnityAction<float> OnDecreaseValue
     + UnityAction<float> OnValueChanged
 }
 
 interface IFactory {
     # GameObject CreateGameObject(params object[] parameters)
 }
 
 abstract class DebuggableMonobehaviour <Monobehaviour> {
         - bool _isDebugging
         # void DebugLog(message)
     }
 
 class GenericUtils {
     # T GetRandomFromArray<T>
     # T AddComponentIfNotExists<T> where T : Component
     # T[] GetAllScrubsInResourceFolder<T> where T : ScriptableObject
     # T GetScrubByNameInArray<T> where T : ScriptableObject
 }
 
 class RotateTowardsMouse <MonoBehaviour> {
     - GameObject rotatedObjects
     # void Update
 }
 
 abstract class Spawner <MonoBehaviour> {
     - Coroutine _spawningCoroutine
     ~ IFactory Factory
     # virtual void SpawnGameObject
     # void StartSpawningAtInterval
     # void StopSpawningAtInterval
     # IEnumerator SpawningAtInterval
 }
 
 package CustomAttributes {
  class PrefabPreviewIcon <PropertyAttribute> {
  }
  
  class PreviewIconDrawer <PropertyDrawer> {
      - float _iconSize
      # void OnGUI
      # float GetPropertyHeight
  }
  
  class RequiredAttribute <PropertyAttribute> {
  }
  
  class RequiredAttributeDrawer <PropertyDrawer> {
      # void OnGUI
      # bool IsValueNullOrEmpty
  }
 }
}

package Resources {
 package Achievements {
  package AchievementScrubs {
  }
  
  package TrackableStatScrubs {
  }
 }
 
 package RuntimeSetScrubs {
 }
}

Achievement --> Requirement
AchievementFunctions --> TrackableStatScrubs
AchievementFunctions --> AchievementScrubs
Spawner --> IFactory

GenericRuntimeSetScrub <|-- GameObjectRuntimeSetScrub

@enduml